<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Mine Rush - Cart Game</title>
  <style>
    canvas {
      background: #333;
      display: block;
      margin: 0 auto;
    }
    body {
      margin: 0;
      overflow: hidden;
    }
  </style>
</head>
<body>
  <canvas id="gameCanvas" width="800" height="400"></canvas>
  <script>
    const canvas = document.getElementById("gameCanvas");
    const ctx = canvas.getContext("2d");

    const penguinImg = new Image();
    penguinImg.src = "penguin.png"; // Ensure this file is in the same directory

    const penguin = {
      x: 100,
      y: 300,
      width: 50,
      height: 50,
      ySpeed: 0,
      onGround: true,
    };

    const gravity = 0.8;
    const jumpForce = -12;
    let keys = {};
    let score = 0;
    let gameOver = false;

    const obstacles = [];

    function spawnObstacle() {
      const height = Math.random() * 40 + 20;
      obstacles.push({
        x: canvas.width,
        y: 350 - height,
        width: 30,
        height,
        color: "red",
      });
    }

    function resetGame() {
      obstacles.length = 0;
      score = 0;
      gameOver = false;
      penguin.y = 300;
      penguin.ySpeed = 0;
      penguin.onGround = true;
    }

    function update() {
      if (gameOver) return;

      score++;
      penguin.ySpeed += gravity;
      penguin.y += penguin.ySpeed;

      if (penguin.y >= 300) {
        penguin.y = 300;
        penguin.ySpeed = 0;
        penguin.onGround = true;
      } else {
        penguin.onGround = false;
      }

      if (keys["ArrowUp"] || keys[" "]) {
        if (penguin.onGround) {
          penguin.ySpeed = jumpForce;
        }
      }

      for (let obs of obstacles) {
        obs.x -= 5;

        if (
          penguin.x < obs.x + obs.width &&
          penguin.x + penguin.width > obs.x &&
          penguin.y < obs.y + obs.height &&
          penguin.y + penguin.height > obs.y
        ) {
          gameOver = true;
        }
      }

      while (obstacles.length && obstacles[0].x < -obstacles[0].width) {
        obstacles.shift();
      }

      if (Math.random() < 0.02) {
        spawnObstacle();
      }
    }

    function draw() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      // Draw player
      ctx.drawImage(penguinImg, penguin.x, penguin.y, penguin.width, penguin.height);

      // Draw obstacles
      for (let obs of obstacles) {
        ctx.fillStyle = obs.color;
        ctx.fillRect(obs.x, obs.y, obs.width, obs.height);
      }

      // Score
      ctx.fillStyle = "white";
      ctx.font = "20px Arial";
      ctx.fillText(`Score: ${score}`, 10, 30);

      if (gameOver) {
        ctx.fillStyle = "white";
        ctx.font = "40px Arial";
        ctx.fillText("Game Over! Press R to Restart", 150, 200);
      }
    }

    function gameLoop() {
      update();
      draw();
      requestAnimationFrame(gameLoop);
    }

    window.addEventListener("keydown", (e) => {
      keys[e.key] = true;
      if (e.key.toLowerCase() === "r" && gameOver) {
        resetGame();
      }
    });

    window.addEventListener("keyup", (e) => {
      keys[e.key] = false;
    });

    gameLoop();
  </script>
</body>
</html>
